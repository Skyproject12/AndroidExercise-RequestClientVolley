package org.d3ifcool.nongkikuy.Preview.Main.Fragment.Terbaru;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.util.Log;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.appcompat.app.ActionBar;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.SearchView;import androidx.appcompat.widget.Toolbar;import androidx.constraintlayout.widget.ConstraintLayout;import androidx.fragment.app.Fragment;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import androidx.recyclerview.widget.StaggeredGridLayoutManager;import com.google.android.gms.tasks.OnFailureListener;import com.google.android.gms.tasks.OnSuccessListener;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseUser;import com.google.firebase.firestore.DocumentReference;import com.google.firebase.firestore.DocumentSnapshot;import com.google.firebase.firestore.FirebaseFirestore;import com.google.firebase.firestore.Query;import com.google.firebase.firestore.QueryDocumentSnapshot;import com.google.firebase.firestore.QuerySnapshot;import org.d3ifcool.nongkikuy.Data.Model.Search;import org.d3ifcool.nongkikuy.Data.Model.TempatNongkrong;import org.d3ifcool.nongkikuy.Preview.DetailTempatNongkrong.DetailTempatNongkrongActivity;import org.d3ifcool.nongkikuy.Preview.Login.LoginActivity;import org.d3ifcool.nongkikuy.Preview.SettingAccountPengguna.SettingAccountPenggunaActivity;import org.d3ifcool.nongkikuy.R;import org.d3ifcool.nongkikuy.Util.Static;import java.util.ArrayList;import java.util.List;/** * A simple {@link Fragment} subclass. */public class TerbaruFragment extends Fragment {    private Toolbar toolbar;    private View mView;    private SearchAdapter searchAdapter;    private RecyclerView recyclerSearch;    private ArrayList<Search> listSearch;    private String listKategori[];    private TerbaruAdapter terbaruAdapter;    private RecyclerView recyclerTerbaru;    private ArrayList<TempatNongkrong> listTerbaru;    private int jumlahBaris = 2;    private MenuItem mSearchItem;    private FirebaseFirestore mFirestore;    private Handler mHandler;    private ConstraintLayout mConstraintPeringkat;    private FirebaseUser mPengguna;    private Handler mTerbaruHandler;    private DocumentReference mMainRef;    private static final String TAG = "TerbaruFragment";    public TerbaruFragment() {        // Required empty public constructor    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        mView = inflater.inflate(R.layout.fragment_terbaru, container, false);        initial();        setHeader();        setSearch();        setTerbaru();        if(mPengguna!=null) {            checkKelengkapanPengguna();        }        return mView;    }    public void initial() {        toolbar = mView.findViewById(R.id.toolbar_terbaru);        ((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);        recyclerSearch = mView.findViewById(R.id.recycler_search);        listSearch = new ArrayList<>();        recyclerTerbaru = mView.findViewById(R.id.recycler_terbaru);        listTerbaru = new ArrayList<>();        mFirestore = FirebaseFirestore.getInstance();        mHandler = new Handler();        mConstraintPeringkat = mView.findViewById(R.id.constraint_peringkat_kosong);        mPengguna = FirebaseAuth.getInstance().getCurrentUser();        mTerbaruHandler = new Handler();    }    public void setHeader() {        ActionBar actionBar = ((AppCompatActivity) getActivity()).getSupportActionBar();        actionBar.setDisplayShowCustomEnabled(true);        LayoutInflater layoutInflater = (LayoutInflater) ((AppCompatActivity) getActivity()).getSystemService(Context.LAYOUT_INFLATER_SERVICE);        View actionView = layoutInflater.inflate(R.layout.item_toolbar_terbaru, null);        actionBar.setCustomView(actionView, new ActionBar.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));        setHasOptionsMenu(true);    }    public void setSearch() {        listKategori = getResources().getStringArray(R.array.search_kategori);        for (int i = 0; i < listKategori.length; i++) {            listSearch.add(new Search(listKategori[i]));        }        searchAdapter = new SearchAdapter(listSearch);        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(getActivity());        linearLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);        recyclerSearch.setLayoutManager(linearLayoutManager);        recyclerSearch.setAdapter(searchAdapter);    }    public void setTerbaru() {        mConstraintPeringkat.setVisibility(View.INVISIBLE);        if (terbaruAdapter == null) {            StaggeredGridLayoutManager staggeredGridLayoutManager = new StaggeredGridLayoutManager(jumlahBaris, StaggeredGridLayoutManager.VERTICAL);            recyclerTerbaru.setLayoutManager(staggeredGridLayoutManager);            terbaruAdapter = new TerbaruAdapter(listTerbaru);            recyclerTerbaru.setAdapter(terbaruAdapter);        }        mFirestore.collection(Static.NONGKRONG)                .orderBy(Static.FAVORITE, Query.Direction.DESCENDING)                .get()                .addOnSuccessListener(new OnSuccessListener<QuerySnapshot>() {                    @Override                    public void onSuccess(QuerySnapshot queryDocumentSnapshots) {                        for (QueryDocumentSnapshot documentSnapshot : queryDocumentSnapshots) {                            TempatNongkrong tempatNongkrong = documentSnapshot.toObject(TempatNongkrong.class);                            String deskripsiTempat = tempatNongkrong.getDeskripsiTempat();                            String gambarTempat = tempatNongkrong.getGambarTempat();                            String id = tempatNongkrong.getId();                            String idNongkrong = tempatNongkrong.getIdNongkrong();                            String namaTempat = tempatNongkrong.getNamaTempat();                            List<String> tagNongkrong = tempatNongkrong.getTagTempat();                            int favorite = tempatNongkrong.getFavorite();                            int view = tempatNongkrong.getView();                            String mWaktu= tempatNongkrong.getWaktuPost();                            String mTanggal= tempatNongkrong.getTanggalPost();                            listTerbaru.add(new TempatNongkrong(deskripsiTempat, gambarTempat, id, idNongkrong, namaTempat, tagNongkrong, favorite, view, mWaktu, mTanggal));                        }                        if (listTerbaru.size() != 0) {                            mConstraintPeringkat.setVisibility(View.INVISIBLE);                        } else {                            mConstraintPeringkat.setVisibility(View.VISIBLE);                        }                        if (terbaruAdapter != null) {                            StaggeredGridLayoutManager staggeredGridLayoutManager = new StaggeredGridLayoutManager(jumlahBaris, StaggeredGridLayoutManager.VERTICAL);                            recyclerTerbaru.setLayoutManager(staggeredGridLayoutManager);                            terbaruAdapter = new TerbaruAdapter(listTerbaru);                            recyclerTerbaru.setAdapter(terbaruAdapter);                            mHandler.postDelayed(new Runnable() {                                @Override                                public void run() {                                    terbaruAdapter.showShummer = false;                                    terbaruAdapter.notifyDataSetChanged();                                }                            }, 1000);                            terbaruAdapter.setOnItemClickCallback(new TerbaruAdapter.OnItemClickCallback() {                                @Override                                public void onItemCliked(TempatNongkrong tempatNongkrong) {                                    if (mPengguna != null) {                                        Intent intent = new Intent(getActivity(), DetailTempatNongkrongActivity.class);                                        intent.putExtra(Static.NONGKRONG, tempatNongkrong);                                        startActivity(intent);                                    } else {                                        Toast.makeText(getActivity(), getString(R.string.masuk_untuk_mengakses_seluruh_fitur), Toast.LENGTH_SHORT).show();                                        mTerbaruHandler.postDelayed(new Runnable() {                                            @Override                                            public void run() {                                                intentToLoginActivity();                                            }                                        }, 1000);                                    }                                }                            });                        }                    }                });    }    @Override    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {        super.onCreateOptionsMenu(menu, inflater);        ((AppCompatActivity) getActivity()).getMenuInflater().inflate(R.menu.menu_terbaru, menu);        mSearchItem = menu.findItem(R.id.action_search);        SearchView searchView = (SearchView) mSearchItem.getActionView();        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {            @Override            public boolean onQueryTextSubmit(String query) {                return false;            }            @Override            public boolean onQueryTextChange(String newText) {                terbaruAdapter.getFilter().filter(newText);                return false;            }        });    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {        }        return super.onOptionsItemSelected(item);    }    public void intentToLoginActivity() {        Intent intent = new Intent(getActivity(), LoginActivity.class);        startActivity(intent);    }    private void checkKelengkapanPengguna() {        mMainRef = mFirestore.collection(Static.PENGGUNA).document(FirebaseAuth.getInstance().getCurrentUser().getUid());        mMainRef.get().addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {            @Override            public void onSuccess(DocumentSnapshot documentSnapshot) {                if (documentSnapshot.getData().get(Static.ASAL) == null && documentSnapshot.getData().get(Static.EMAIL) == null && documentSnapshot.getData().get(Static.NAMA) == null) {                } else if (documentSnapshot.getData().get(Static.ASAL) == null && documentSnapshot.getData().get(Static.PASSWORD) == null) {                    Intent intent = new Intent(getContext(), SettingAccountPenggunaActivity.class);                    intent.putExtra(Static.STATUS, Static.FACEBOOK);                    startActivity(intent);                } else if (documentSnapshot.getData().get(Static.GAMBARPROFIL) == null && documentSnapshot.getData().get(Static.ASAL) == null) {                    Intent intent = new Intent(getContext(), SettingAccountPenggunaActivity.class);                    intent.putExtra(Static.STATUS, Static.FIREBASE);                    startActivity(intent);                } else if (documentSnapshot.getData().get(Static.ASAL) == null && documentSnapshot.getData().get(Static.PASSWORD) == null) {                    Intent intent = new Intent(getContext(), SettingAccountPenggunaActivity.class);                    intent.putExtra(Static.STATUS, Static.GOOGLE);                    startActivity(intent);                } else {                }            }        })                .addOnFailureListener(new OnFailureListener() {                    @Override                    public void onFailure(@NonNull Exception e) {                        Log.d(TAG, Static.FAILED + e.getMessage());                    }                });    }}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     